# Note: A Deployment that configures a ReplicaSet is now the recommended way to set up replication.
# A ReplicationController ensures that a specified number of pod replicas are running at any one time. In other words, a ReplicationController makes sure that a pod or a homogeneous set of pods is always up and available.
# SOURCE: https://github.com/kubernetes/kubernetes/tree/v1.12.0/cluster/addons/cluster-monitoring/influxdb
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: monitoring-influxdb-grafana-v4
  namespace: kube-system
  labels:
    k8s-app: influxGrafana
    version: v4
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    # kubernetes.io/ingress.class: "nginx"
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: influxGrafana
      version: v4
  template:
    metadata:
      labels:
        k8s-app: influxGrafana
        version: v4
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        # https://kubernetes.io/docs/concepts/policy/pod-security-policy/
        # seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      # NOTE: https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      # Guaranteed Scheduling For Critical Add-On Pods
      priorityClassName: system-cluster-critical
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      containers:
        - name: influxdb
          image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
          resources:
            limits:
              cpu: 100m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 500Mi
          ports:
            - name: http
              containerPort: 8083
            - name: api
              containerPort: 8086
          volumeMounts:
          - name: influxdb-persistent-storage
            mountPath: /data
        - name: grafana
          image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
          env:
          resources:
            # keep request = limit to keep this container in guaranteed class
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 100Mi
          env:
            # This variable is required to setup templates in Grafana.
            - name: INFLUXDB_SERVICE_URL
              # ORIG: value: http://monitoring-influxdb:8086
              value: http://localhost:8086
              # value: http://monitoring-influxdb:8086
              # The following env variables are required to make Grafana accessible via
              # the kubernetes api-server proxy. On production clusters, we recommend
              # removing these env variables, setup auth for grafana, and expose the grafana
              # service using a LoadBalancer or a public IP.
            - name: GF_AUTH_BASIC_ENABLED
              value: "false"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: Admin
              # ORIG # - name: GF_SERVER_ROOT_URL
              # ORIG #   value: /api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/
              #- name: GF_SERVER_ROOT_URL
              #  value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/
          ports:
          - name: ui
            containerPort: 3000
          volumeMounts:
          - name: grafana-persistent-storage
            mountPath: /var
      volumes:
      - name: influxdb-persistent-storage
        emptyDir: {}
      - name: grafana-persistent-storage
        emptyDir: {}
